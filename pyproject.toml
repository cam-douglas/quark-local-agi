[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "meta-model-ai-assistant"
version = "1.0.0"
description = "Advanced multi-agent AI assistant with safety, memory, and cloud integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Meta-Model Team", email = "team@meta-model.ai"}
]
maintainers = [
    {name = "Meta-Model Team", email = "team@meta-model.ai"}
]
keywords = ["ai", "assistant", "multi-agent", "safety", "memory", "cloud"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "transformers>=4.20.0",
    "torch>=1.12.0",
    "sentence-transformers>=2.2.0",
    "chromadb>=0.4.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "websockets>=12.0",
    "pydantic>=2.0.0",
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "numpy>=1.21.0",
    "scikit-learn>=1.0.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "tqdm>=4.64.0",
    "python-dotenv>=0.19.0",
    "psutil>=5.8.0",
    "asyncio-mqtt>=0.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
cloud = [
    "google-cloud-aiplatform>=1.25.0",
    "boto3>=1.26.0",
    "azure-ai-ml>=1.0.0",
]
web = [
    "gradio>=3.0.0",
    "streamlit>=1.25.0",
    "dash>=2.8.0",
]

[project.urls]
Homepage = "https://github.com/meta-model/meta-model-ai-assistant"
Documentation = "https://meta-model-ai-assistant.readthedocs.io"
Repository = "https://github.com/meta-model/meta-model-ai-assistant"
"Bug Tracker" = "https://github.com/meta-model/meta-model-ai-assistant/issues"
"Source Code" = "https://github.com/meta-model/meta-model-ai-assistant"

[project.scripts]
meta-model = "cli.cli:main"
meta-memory = "cli.memory_cli:memory"
meta-metrics = "cli.metrics_cli:metrics"
meta-safety = "cli.safety_cli:safety"
meta-streaming = "cli.streaming_cli:streaming"
meta-cloud = "cli.cloud_cli:cloud"
meta-web = "cli.web_browser_cli:web"

[project.entry-points."console_scripts"]
meta-model = "cli.cli:main"
meta-memory = "cli.memory_cli:memory"
meta-metrics = "cli.metrics_cli:metrics"
meta-safety = "cli.safety_cli:safety"
meta-streaming = "cli.streaming_cli:streaming"
meta-cloud = "cli.cloud_cli:cloud"
meta-web = "cli.web_browser_cli:web"

[tool.setuptools.packages.find]
where = ["."]
include = ["agents*", "core*", "cli*", "web*", "tests*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["agents", "core", "cli", "web", "tests"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "adversarial: marks tests as adversarial tests",
]

[tool.coverage.run]
source = ["agents", "core", "cli", "web"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 