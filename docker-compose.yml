version: '3.8'

services:
  # Main AI Assistant
  meta-model:
    build: .
    container_name: meta-model-ai
    ports:
      - "8000:8000"  # Web API
      - "8001:8001"  # Metrics
      - "8002:8002"  # WebSocket
    environment:
      - META_MODEL_ENV=development
      - META_MODEL_SAFETY_ENABLED=true
      - META_MODEL_MEMORY_PATH=/app/memory_db
      - META_MODEL_CLOUD_ENABLED=true
      - META_MODEL_WEB_BROWSER_ENABLED=true
      - META_MODEL_LOG_LEVEL=DEBUG
    volumes:
      - ./memory_db:/app/memory_db
      - ./logs:/app/logs
      - ./models:/app/models
      - ./config:/app/config
    networks:
      - meta-model-network
    depends_on:
      - redis
      - chromadb
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: meta-model-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - meta-model-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: meta-model-chromadb
    ports:
      - "8003:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - meta-model-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: meta-model-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - meta-model-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: meta-model-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - meta-model-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Nginx for load balancing (optional)
  nginx:
    image: nginx:alpine
    container_name: meta-model-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/ssl:/etc/nginx/ssl
    networks:
      - meta-model-network
    restart: unless-stopped
    depends_on:
      - meta-model

networks:
  meta-model-network:
    driver: bridge

volumes:
  redis_data:
  chromadb_data:
  prometheus_data:
  grafana_data: 